1. Как вы можете описать процесс распространения событий вJavaScript (Event Propagation)? Расскажите о его основных фазах. Какие есть способы применения знаний о фазах распространения событий на практике?

event Propagation - механизм, по которому событие распространяется по DOM дереву, есть 3  фазы - погружение, достижение цели и всплытие.
Применение- в делегировании событий, когда обработичк события навешивается на родительский елемент, а элемент, в котором произошло событие, определяется через event.target

2. Расскажите, что такое Promise в JavaScript, как он работает, какие основные состояния у него бывают? Каким еще способом можно обработать асинхронный код? Какую роль в асинхронности играет событийный цикл (Event Loop)?

Promise - объект, который представляет результат асинхронной операции. Основные сотсояния - pending(ождиает выполнения), fulfilled(успешно завершено), rejected(произошла ошибка).
Можно обработать через callback функции, async/await
Асинхронность обеспечивается событийным циклом eventloop. Он проверяет стек вызовов и очередь задач, чтобы запускать асинхронные вызовы после завершения текущего кода.

3. Что такое ООП, и какие его ключевые принципы вы могли бы описать? При объяснении приводите примеры. Максимально подробно расскажите о том, как ООП реализовано в JavaScript.

ООП (объектно-ориентированное программирование) — это подход, в котором программа состоит из объектов, обладающих свойствами и методами. Он делает код более понятным и удобным для поддержки.

Главные принципы ООП -
Абстракция — выделение главного и скрытие ненужных деталей.
Пример: объект «Сотрудник» хранит только должность и зарплату, но не рост и вес.

Инкапсуляция — защита данных объекта от внешнего вмешательства.
Пример: доступ к данным через методы get и set, а не напрямую.

Наследование — создание нового класса на основе существующего.
Пример: класс «Кошка» наследует общие свойства от класса «Животное».

Полиморфизм — возможность использовать один интерфейс для разных объектов.
Пример: метод speak() вызывает разное поведение у разных животных.

Как реализовано ООП в JavaScript
Классы и объекты: создаются через class и new.

Наследование: class ElectricCar extends Car позволяет расширять поведение.
Инкапсуляция: приватные поля обозначаются через #balance.
Полиморфизм: можно переопределить методы в дочерних классах.

ООП в JavaScript реализовано через систему классов, наследование (extends), инкапсуляцию (приватные поля) и полиморфизм (переопределение методов), что помогает писать гибкий и читаемый код.

4. Опишите максимально детально, как браузер обрабатывает URL,
начиная с момента его ввода в адресную строку и заканчивая отображением страницы. Какие технологии позволяют ускорить процесс? Какие проблемы (безопастность, междоменное
взаимодействие) могут возникать в процессе?
Проверка протокола (http/https), добавление по умолчанию, если не указан.
Поиск IP через DNS-кэш браузера, системный кэш, файл hosts, запрос к DNS-серверу.
Установление TCP-соединения, проверка сертификата при https.
Отправка HTTP-запроса (обычно GET).
Получение HTTP-ответа от сервера.
Парсинг HTML, построение DOM, загрузка и обработка ресурсов (CSS — формирование CSSOM).
Создание render tree, вычисление геометрии (layout), отрисовка (painting), компоновка слоёв (compositing).
Передача данных на GPU и вывод страницы на экран.